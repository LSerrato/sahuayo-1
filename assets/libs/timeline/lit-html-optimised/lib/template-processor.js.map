{"version":3,"file":"template-processor.js","sourceRoot":"","sources":["../src/lib/template-processor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {Part} from './part.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {AttributeTemplatePart, NodeTemplatePart} from './template.js';\n\nexport interface TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   * @param templatePart The AttributeTemplatePart for this expression\n   *     as extracted by the Template class. Can be used to cache information\n   *     that should be computed once per template literal in the source code.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: readonly string[],\n      options: RenderOptions,\n      // TODO: next breaking change, consider making this required\n      templatePart?: AttributeTemplatePart): readonly Part[];\n\n  /**\n   * Create parts for a text-position binding.\n   * @param partOptions\n   */\n  handleTextExpression(\n      options: RenderOptions,\n      // TODO: next breaking change, consider making this required\n      templatePart?: NodeTemplatePart): NodePart;\n}\n"]}